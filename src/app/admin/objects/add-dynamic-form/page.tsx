'use client';

import React, { useState, useEffect } from 'react';
import { FieldRow, FormData, FilterState } from '@/types/realEstateForm';
import { FIELD_ROWS } from '@/data/fieldRows';
import { filterFields } from '@/lib/fieldFilter';
import { DynamicForm } from '@/components/DynamicRealEstateForm';
import { MediaUploader, MediaFile } from '@/components/MediaUploader';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select-fixed';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from '@/components/ui/breadcrumb';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Save } from 'lucide-react';
import ProtectedRoute from '@/components/ProtectedRoute';

const COUNTRIES = ['–†–æ—Å—Å–∏—è', '–¢–∞–∏–ª–∞–Ω–¥', '–ö–∏—Ç–∞–π', '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è'];
const OPERATIONS = ['–ü—Ä–æ–¥–∞–∂–∞', '–ê—Ä–µ–Ω–¥–∞', '–û–±–º–µ–Ω'];
const OBJECT_TYPES = [
  '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
  '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º',
  '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
  '–ó–¥–∞–Ω–∏–µ',
  '–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å',
  '–ù–µ–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç',
  '–î–æ–ª—è –≤ –ø—Ä–∞–≤–µ',
  '–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫'
];

export default function DynamicRealEstateFormPage() {
  const [filters, setFilters] = useState<FilterState>({});
  const [formData, setFormData] = useState<FormData>({});
  const [availableFields, setAvailableFields] = useState<FieldRow[]>([]);
  const [mediaFiles, setMediaFiles] = useState<MediaFile[]>([]);
  const [activeTab, setActiveTab] = useState<'characteristics' | 'media'>('characteristics');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const filtered = filterFields(FIELD_ROWS, filters);
    setAvailableFields(filtered);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    setFormData({});
  }, [filters]);
  
  const handleFilterChange = (key: keyof FilterState, value: string) => {
    setFilters(prev => ({
      ...prev,
      [key]: value === '__empty__' ? undefined : value
    }));
  };
  
  const handleFormDataChange = (data: FormData) => {
    setFormData(data);
  };
  
  const handleMediaChange = (media: MediaFile[]) => {
    setMediaFiles(media);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–±–ª–æ–∂–∫–∏ –µ—â–µ –Ω–µ—Ç
    const hasCover = media.some(item => item.isCover);
    if (!hasCover && media.length > 0) {
      const firstImage = media.find(m => m.type === 'image');
      if (firstImage) {
        firstImage.isCover = true;
      }
    }
  };
  
  const handleSetCover = (id: string) => {
    setMediaFiles((items) => {
      const updatedItems = items.map((item) => ({
        ...item,
        isCover: item.id === id
      }));
      return updatedItems;
    });
  };
  
  const handleRemoveMedia = (id: string) => {
    setMediaFiles((items) => {
      const updatedItems = items.filter(file => file.id !== id);
      
      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é
      const removedItem = items.find(item => item.id === id);
      if (removedItem?.isCover) {
        const firstImage = updatedItems.find(item => item.type === 'image');
        if (firstImage) {
          firstImage.isCover = true;
        }
      }
      
      return updatedItems;
    });
  };
  
  const handleSubmit = (data: FormData) => {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const mediaData = mediaFiles.map(file => ({
      id: file.id,
      name: file.name,
      type: file.type,
      size: file.size,
      isCover: file.isCover || false,
      order: file.order || 0
    }));

    const coverFile = mediaFiles.find(file => file.isCover);

    const newObject = {
      id: Date.now(),
      title: data.address || '–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç',
      address: data.address || '',
      area: `${data.totalArea || ''} ${data.areaUnit || ''}`,
      floor: data.floor || '',
      price: data.price || '',
      material: data.material || '',
      coordinates: { lat: 0, lng: 0 },
      type: filters.objectType,
      operation: filters.operation,
      country: filters.country,
      fields: data, // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      media: mediaData, // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞—Ö —Å –ø–æ—Ä—è–¥–∫–æ–º –∏ –æ–±–ª–æ–∂–∫–æ–π
      coverId: coverFile?.id // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±–ª–æ–∂–∫–∏
    };

    console.log('–°–æ—Ö—Ä–∞–Ω—ë–Ω –æ–±—ä–µ–∫—Ç —Å –º–µ–¥–∏–∞:', newObject);
    console.log('–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã:', mediaFiles);
    console.log('–û–±–ª–æ–∂–∫–∞:', coverFile);
    alert(`–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${Object.keys(data).length} –ø–æ–ª–µ–π\n–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã: ${mediaFiles.length} —Ñ–∞–π–ª–æ–≤\n–û–±–ª–æ–∂–∫–∞: ${coverFile ? coverFile.name : '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
    
    // –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –∏–ª–∏ API
  };
  
  const handleReset = () => {
    setFilters({});
    setFormData({});
    setMediaFiles([]);
    setActiveTab('characteristics');
  };
  
  return (
    <ProtectedRoute requiredPermission="adminPanel">
      <div className="container mx-auto py-8 space-y-8">
        {/* Breadcrumb */}
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/admin">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbLink href="/admin/objects">–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
        
        <Card>
          <CardHeader>
            <CardTitle className="text-2xl font-bold">–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</CardTitle>
            <CardDescription>
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'characteristics' | 'media')}>
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="characteristics" className="flex items-center gap-2">
                  <span>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</span>
                  {Object.keys(formData).length > 0 && (
                    <Badge variant="secondary" className="ml-1">
                      {Object.keys(formData).length}
                    </Badge>
                  )}
                </TabsTrigger>
                <TabsTrigger value="media" className="flex items-center gap-2">
                  <span>–§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ</span>
                  {mediaFiles.length > 0 && (
                    <Badge variant="secondary" className="ml-1">
                      {mediaFiles.length}
                    </Badge>
                  )}
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="characteristics" className="space-y-6 mt-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                  <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ–ª–µ–π</p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–°—Ç—Ä–∞–Ω–∞</label>
                      <Select value={filters.country || ''} onValueChange={(value) => handleFilterChange('country', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem key="empty" value="__empty__">
                            ‚Äî
                          </SelectItem>
                          {COUNTRIES.map(country => (
                            <SelectItem key={country} value={country}>
                              {country}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–û–ø–µ—Ä–∞—Ü–∏—è</label>
                      <Select value={filters.operation || ''} onValueChange={(value) => handleFilterChange('operation', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem key="empty" value="__empty__">
                            ‚Äî
                          </SelectItem>
                          {OPERATIONS.map(operation => (
                            <SelectItem key={operation} value={operation}>
                              {operation}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞</label>
                      <Select value={filters.objectType || ''} onValueChange={(value) => handleFilterChange('objectType', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem key="empty" value="__empty__">
                            ‚Äî
                          </SelectItem>
                          {OBJECT_TYPES.map(type => (
                            <SelectItem key={type} value={type}>
                              {type}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–ê–¥—Ä–µ—Å</label>
                      <Input
                        type="text"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞"
                        value={formData.address || ''}
                        onChange={(e) => handleFormDataChange({ ...formData, address: e.target.value })}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label className="text-sm font-medium">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å</label>
                      <div className="flex gap-2">
                        <div className="relative flex-1">
                          <Input
                            type="number"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å"
                            value={formData.totalArea || ''}
                            onChange={(e) => handleFormDataChange({ ...formData, totalArea: e.target.value })}
                          />
                        </div>
                        <div className="relative">
                          <Select 
                            value={formData.areaUnit || 'm2'} 
                            onValueChange={(value) => handleFormDataChange({ ...formData, areaUnit: value === '__empty__' ? undefined : value })}
                          >
                            <SelectTrigger className="w-32">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="__empty__">‚Äî</SelectItem>
                              <SelectItem value="m2">–º¬≤</SelectItem>
                              <SelectItem value="hectare">–ì–µ–∫—Ç–∞—Ä</SelectItem>
                              <SelectItem value="sotka">–°–æ—Ç–∫–∏</SelectItem>
                              <SelectItem value="wah2">Wah¬≤</SelectItem>
                              <SelectItem value="ngan">Ngan</SelectItem>
                              <SelectItem value="rai">Rai</SelectItem>
                              <SelectItem value="pyeong">Ìèâ</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <DynamicForm
                  fields={availableFields}
                  formData={formData}
                  onFormDataChange={handleFormDataChange}
                  onSubmit={handleSubmit}
                  onReset={handleReset}
                />
              </TabsContent>
              
              <TabsContent value="media" className="space-y-6 mt-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">–§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ</h3>
                  
                  <MediaUploader
                    onMediaChange={handleMediaChange}
                    maxFiles={20}
                    maxSize={50}
                  />
                  
                  <div className="flex gap-4 pt-6 justify-end">
                    <Button 
                      onClick={handleReset}
                      variant="outline"
                      className="flex items-center gap-2"
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å
                    </Button>
                    <Button 
                      onClick={() => handleSubmit(formData)}
                      className="flex items-center gap-2"
                      disabled={Object.keys(formData).length === 0}
                    >
                      <Save className="w-4 h-4" />
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç
                    </Button>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
        
      </div>
    </ProtectedRoute>
  );
}