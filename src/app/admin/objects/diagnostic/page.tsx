'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Label } from '@/components/ui/label'
import { getAvailableFields } from '@/lib/filterLogic'

// –ú–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π
const COUNTRY_MAPPING: Record<string, string> = {
  '–†–æ—Å—Å–∏—è': 'russia',
  '–¢–∞–∏–ª–∞–Ω–¥': 'thailand', 
  '–ö–∏—Ç–∞–π': 'china',
  '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è': 'south-korea'
}

const OPERATION_MAPPING: Record<string, string> = {
  '–ü—Ä–æ–¥–∞–∂–∞': 'sale',
  '–ê—Ä–µ–Ω–¥–∞': 'rent',
  '–û–±–º–µ–Ω': 'exchange'
}

const OBJECT_TYPE_MAPPING: Record<string, string> = {
  '–ö–≤–∞—Ä—Ç–∏—Ä–∞': 'apartment',
  '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º': 'house',
  '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ': 'commercial',
  '–ó–¥–∞–Ω–∏–µ': 'building',
  '–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å': 'complex',
  '–ù–µ–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç': 'non-capital',
  '–î–æ–ª—è –≤ –ø—Ä–∞–≤–µ': 'share',
  '–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫': 'land'
}

const REVERSE_COUNTRY_MAPPING = Object.fromEntries(
  Object.entries(COUNTRY_MAPPING).map(([k, v]) => [v, k])
)
const REVERSE_OPERATION_MAPPING = Object.fromEntries(
  Object.entries(OPERATION_MAPPING).map(([k, v]) => [v, k])
)
const REVERSE_OBJECT_TYPE_MAPPING = Object.fromEntries(
  Object.entries(OBJECT_TYPE_MAPPING).map(([k, v]) => [v, k])
)

export default function DiagnosticPage() {
  const [formData, setFormData] = useState({
    country: '',
    operation: '',
    objectType: ''
  })
  
  const [availableFields, setAvailableFields] = useState<any[]>([])
  const [debugInfo, setDebugInfo] = useState<any>(null)

  useEffect(() => {
    if (formData.country && formData.operation && formData.objectType) {
      const countryName = REVERSE_COUNTRY_MAPPING[formData.country]
      const operationName = REVERSE_OPERATION_MAPPING[formData.operation]
      const objectTypeName = REVERSE_OBJECT_TYPE_MAPPING[formData.objectType]
      
      const fields = getAvailableFields(countryName, operationName, objectTypeName)
      setAvailableFields(fields)
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      const debug = {
        formData,
        converted: {
          country: countryName,
          operation: operationName,
          objectType: objectTypeName
        },
        fieldsCount: fields.length,
        problematicFields: fields.filter(field => 
          field.name === "–¢–∏–ø —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞" || 
          field.name === "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä" ||
          field.name === "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        ),
        requiredFields: fields.filter(field => 
          field.name === "–£–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç—å –æ—Ç –º–æ—Ä—è" ||
          field.name === "–ê—Ä–µ–Ω–¥–∞ –∑–∞ –º¬≤" ||
          field.name === "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è" ||
          field.name === "–†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞" ||
          field.name === "–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã" ||
          field.name === "–ê—Ä–µ–Ω–¥–∞ —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏" ||
          field.name === "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã"
        )
      }
      
      setDebugInfo(debug)
      
      console.log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:", debug)
    } else {
      setAvailableFields([])
      setDebugInfo(null)
    }
  }, [formData.country, formData.operation, formData.objectType])

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const countries = Object.keys(COUNTRY_MAPPING)
  const operations = Object.keys(OPERATION_MAPPING)
  const objectTypes = Object.keys(OBJECT_TYPE_MAPPING)

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        </h1>
        <p className="text-gray-600">
          –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ "–¢–∞–∏–ª–∞–Ω–¥ ‚Üí –ê—Ä–µ–Ω–¥–∞ ‚Üí –ß–∞—Å—Ç–Ω—ã–π –¥–æ–º"
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>–í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</CardTitle>
            <CardDescription>
              –í—ã–±–µ—Ä–∏—Ç–µ "–¢–∞–∏–ª–∞–Ω–¥ ‚Üí –ê—Ä–µ–Ω–¥–∞ ‚Üí –ß–∞—Å—Ç–Ω—ã–π –¥–æ–º" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label>–°—Ç—Ä–∞–Ω–∞</Label>
              <Select value={formData.country} onValueChange={(value) => updateFormData('country', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É" />
                </SelectTrigger>
                <SelectContent>
                  {countries.map(country => (
                    <SelectItem key={COUNTRY_MAPPING[country]} value={COUNTRY_MAPPING[country]}>
                      {country}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–û–ø–µ—Ä–∞—Ü–∏—è</Label>
              <Select 
                value={formData.operation} 
                onValueChange={(value) => updateFormData('operation', value)}
                disabled={!formData.country}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  {operations.map(operation => (
                    <SelectItem key={OPERATION_MAPPING[operation]} value={OPERATION_MAPPING[operation]}>
                      {operation}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞</Label>
              <Select 
                value={formData.objectType} 
                onValueChange={(value) => updateFormData('objectType', value)}
                disabled={!formData.operation}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞" />
                </SelectTrigger>
                <SelectContent>
                  {objectTypes.map(type => (
                    <SelectItem key={OBJECT_TYPE_MAPPING[type]} value={OBJECT_TYPE_MAPPING[type]}>
                      {type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
              {debugInfo && (
                <Badge variant={debugInfo.problematicFields.length === 0 ? "default" : "destructive"}>
                  {debugInfo.problematicFields.length === 0 ? "‚úÖ OK" : "‚ùå –û—à–∏–±–∫–∞"}
                </Badge>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {debugInfo ? (
              <div className="space-y-4">
                <div className="p-3 bg-blue-50 rounded-lg">
                  <h4 className="font-medium text-blue-800">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</h4>
                  <p className="text-sm text-blue-700">
                    {debugInfo.converted.country} ‚Üí {debugInfo.converted.operation} ‚Üí {debugInfo.converted.objectType}
                  </p>
                  <p className="text-sm text-blue-600 mt-1">
                    –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ–π: {debugInfo.fieldsCount}
                  </p>
                </div>

                <div className="space-y-3">
                  <div>
                    <h4 className="font-medium text-green-600 mb-2">‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞—Ä–µ–Ω–¥—ã:</h4>
                    <div className="space-y-1">
                      {debugInfo.requiredFields.map((field: any) => (
                        <div key={field.name} className="text-sm text-green-600">
                          ‚úì {field.name}
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium text-red-600 mb-2">‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è (–Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è):</h4>
                    {debugInfo.problematicFields.length > 0 ? (
                      <div className="space-y-1">
                        {debugInfo.problematicFields.map((field: any) => (
                          <div key={field.name} className="text-sm text-red-600">
                            ‚úó {field.name}
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-sm text-green-600">‚úì –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã</div>
                    )}
                  </div>
                </div>

                <div className="p-3 bg-gray-50 rounded-lg">
                  <h4 className="font-medium text-gray-800 mb-2">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
                  <pre className="text-xs text-gray-600 overflow-auto">
                    {JSON.stringify(debugInfo, null, 2)}
                  </pre>
                </div>
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π */}
      {availableFields.length > 0 && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è ({availableFields.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
              {availableFields.map((field, index) => (
                <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="text-sm font-medium">{field.name}</span>
                  <Badge variant="outline" className="text-xs">
                    {field.type}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
