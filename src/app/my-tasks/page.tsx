"use client"

import { useState, useEffect } from "react";
import Link from "next/link";
import BurgerMenu from "@/components/BurgerMenu";
import Header from "@/components/Header";
import { useLanguage } from "@/contexts/LanguageContext";

interface Task {
  id: number;
  title: string;
  description: string;
  priority: string;
  status: string;
  deadline: string;
  deadlineTime: string;
  executors: number[];
  curators: number[];
  createdAt: string;
  updatedAt: string;
  createdBy: number;
  images: any[];
  links: any[];
  checklists: any[];
  subtasks: any[];
  comments: any[];
  tags: string[];
  estimatedHours: number;
  actualHours: number;
}

interface User {
  id: number;
  name: string;
  role: string;
  email: string;
}

export default function MyTasksPage() {
  const { t } = useLanguage();
  const [currentUser] = useState<User>({ id: 1, name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", role: "admin", email: "anna@metrika.ru" });
  const [allTasks, setAllTasks] = useState<Task[]>([]);
  const [filteredTasks, setFilteredTasks] = useState<Task[]>([]);
  const [activeTab, setActiveTab] = useState('all');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  const users = [
    { id: 1, name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", role: "admin", email: "anna@metrika.ru" },
    { id: 2, name: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤", role: "manager", email: "ivan@metrika.ru" },
    { id: 3, name: "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞", role: "employee", email: "maria@metrika.ru" },
    { id: 4, name: "–ê–ª–µ–∫—Å–µ–π –í–æ–ª–∫–æ–≤", role: "employee", email: "alexey@metrika.ru" },
    { id: 5, name: "–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞", role: "employee", email: "elena@metrika.ru" },
    { id: 6, name: "–î–º–∏—Ç—Ä–∏–π –ú–æ—Ä–æ–∑–æ–≤", role: "freelancer", email: "dmitry@metrika.ru" },
    { id: 7, name: "–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞", role: "client", email: "olga@metrika.ru" },
    { id: 8, name: "–°–µ—Ä–≥–µ–π –õ–µ–±–µ–¥–µ–≤", role: "employee", email: "sergey@metrika.ru" }
  ];

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—Ç–µ –∂–µ —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
  const testTasks: Task[] = [
    {
      id: 1,
      title: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
      description: "–°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel –∏ PDF —Ñ–æ—Ä–º–∞—Ç–∞—Ö.",
      priority: "high",
      status: "in_progress",
      deadline: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      deadlineTime: "15:30",
      executors: [3, 4], // –ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞, –ê–ª–µ–∫—Å–µ–π –í–æ–ª–∫–æ–≤
      curators: [2], // –ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      createdBy: 1, // –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞
      images: [],
      links: [],
      checklists: [],
      subtasks: [],
      comments: [],
      tags: ["—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "CRM", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"],
      estimatedHours: 24,
      actualHours: 8
    },
    {
      id: 2,
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
      description: "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞.",
      priority: "medium",
      status: "new",
      deadline: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      deadlineTime: "18:00",
      executors: [1], // –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞
      curators: [2], // –ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      createdBy: 2, // –ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤
      images: [],
      links: [],
      checklists: [],
      subtasks: [],
      comments: [],
      tags: ["–¥–∏–∑–∞–π–Ω", "UI/UX", "–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"],
      estimatedHours: 16,
      actualHours: 0
    },
    {
      id: 3,
      title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
      description: "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
      priority: "low",
      status: "completed",
      deadline: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      deadlineTime: "12:00",
      executors: [5], // –ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞
      curators: [1], // –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      createdBy: 1, // –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞
      images: [],
      links: [],
      checklists: [],
      subtasks: [],
      comments: [],
      tags: ["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "push"],
      estimatedHours: 12,
      actualHours: 12
    }
  ];

  useEffect(() => {
    setAllTasks(testTasks);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const getMyTasks = () => {
    return allTasks.filter(task => 
      task.createdBy === currentUser.id || // –ó–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ —è —Å–æ–∑–¥–∞–ª
      task.executors.includes(currentUser.id) || // –ó–∞–¥–∞—á–∏ –≥–¥–µ —è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
      task.curators.includes(currentUser.id) // –ó–∞–¥–∞—á–∏ –≥–¥–µ —è –∫—É—Ä–∞—Ç–æ—Ä
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const getTasksByStatus = (status: string) => {
    const myTasks = getMyTasks();
    switch (status) {
      case 'created':
        return myTasks.filter(task => task.createdBy === currentUser.id);
      case 'assigned':
        return myTasks.filter(task => task.executors.includes(currentUser.id));
      case 'curated':
        return myTasks.filter(task => task.curators.includes(currentUser.id));
      case 'completed':
        return myTasks.filter(task => task.status === 'completed');
      case 'in_progress':
        return myTasks.filter(task => task.status === 'in_progress');
      case 'overdue':
        return myTasks.filter(task => {
          const deadline = new Date(task.deadline);
          const now = new Date();
          return deadline < now && task.status !== 'completed';
        });
      default:
        return myTasks;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'low': return 'bg-green-500';
      case 'medium': return 'bg-orange-500';
      case 'high': return 'bg-red-500';
      case 'boss': return 'bg-yellow-500';
      default: return 'bg-gray-500';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityName = (priority: string) => {
    switch (priority) {
      case 'low': return 'üü¢ –û–±—ã—á–Ω–∞—è';
      case 'medium': return 'üü† –í–∞–∂–Ω–∞—è';
      case 'high': return 'üî¥ –°—Ä–æ—á–Ω–∞—è';
      case 'boss': return 'üü° –ó–∞–¥–∞—á–∞ –æ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusName = (status: string) => {
    switch (status) {
      case 'new': return '–ù–æ–≤–∞—è';
      case 'in_progress': return '–í —Ä–∞–±–æ—Ç–µ';
      case 'review': return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
      case 'completed': return '–í—ã–ø–æ–ª–Ω–µ–Ω–∞';
      case 'postponed': return '–û—Ç–ª–æ–∂–µ–Ω–∞';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞';
      case 'overdue': return '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  const getUserName = (userId: number) => {
    const user = users.find(u => u.id === userId);
    return user ? user.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–¥–∞—á–µ
  const getUserRoleInTask = (task: Task) => {
    if (task.createdBy === currentUser.id) return '–°–æ–∑–¥–∞—Ç–µ–ª—å';
    if (task.executors.includes(currentUser.id)) return '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
    if (task.curators.includes(currentUser.id)) return '–ö—É—Ä–∞—Ç–æ—Ä';
    return '–£—á–∞—Å—Ç–Ω–∏–∫';
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
  useEffect(() => {
    const tasks = getTasksByStatus(activeTab);
    setFilteredTasks(tasks);
  }, [allTasks, activeTab, currentUser.id]);

  const tabs = [
    { id: 'all', name: '–í—Å–µ –∑–∞–¥–∞—á–∏', count: getMyTasks().length },
    { id: 'created', name: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π', count: getTasksByStatus('created').length },
    { id: 'assigned', name: '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ', count: getTasksByStatus('assigned').length },
    { id: 'curated', name: '–ö—É—Ä–∏—Ä—É–µ–º—ã–µ –º–Ω–æ–π', count: getTasksByStatus('curated').length },
    { id: 'in_progress', name: '–í —Ä–∞–±–æ—Ç–µ', count: getTasksByStatus('in_progress').length },
    { id: 'overdue', name: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ', count: getTasksByStatus('overdue').length },
    { id: 'completed', name: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', count: getTasksByStatus('completed').length }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <BurgerMenu />
      
      <main className="pt-32 px-4">
        <div className="max-w-6xl mx-auto">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-black mb-2">–ú–æ–∏ –∑–∞–¥–∞—á–∏</h1>
            <p className="text-gray-600">–í—Å–µ –∑–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞–º–∏</p>
          </div>

          {/* –¢–∞–±—ã */}
          <div className="bg-white rounded-lg border border-gray-200 mb-6">
            <div className="flex border-b border-gray-200">
              {tabs.map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex-1 px-2 py-3 text-sm font-medium border-b-2 transition-colors ${
                    activeTab === tab.id
                      ? 'border-gray-500 text-gray-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <div className="flex flex-col items-center">
                    <span className="text-xs">{tab.name}</span>
                    <span className="mt-1 px-1.5 py-0.5 text-xs bg-gray-100 text-gray-600 rounded-full">
                      {tab.count}
                    </span>
                  </div>
                </button>
              ))}
            </div>
          </div>


          {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
          <div className="space-y-4">
            {filteredTasks.length > 0 ? (
              filteredTasks.map(task => (
                <div key={task.id} className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-lg font-semibold text-black">{task.title}</h3>
                        <div className={`w-3 h-3 rounded-full ${getPriorityColor(task.priority)}`}></div>
                      </div>
                      <p className="text-gray-600 mb-3">{task.description}</p>
                      
                      <div className="flex flex-wrap gap-4 text-sm text-gray-500">
                        <span>–°—Ç–∞—Ç—É—Å: <span className="font-medium">{getStatusName(task.status)}</span></span>
                        <span>–î–µ–¥–ª–∞–π–Ω: <span className="font-medium">{task.deadline} –≤ {task.deadlineTime}</span></span>
                        <span>–ú–æ—è —Ä–æ–ª—å: <span className="font-medium text-gray-600">{getUserRoleInTask(task)}</span></span>
                        <span>–°–æ–∑–¥–∞—Ç–µ–ª—å: <span className="font-medium">{getUserName(task.createdBy)}</span></span>
                      </div>
                    </div>
                    
                    <div className="flex flex-col gap-2">
                      <Link 
                        href={`/task/${task.id}`}
                        className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors text-center"
                      >
                        –û—Ç–∫—Ä—ã—Ç—å
                      </Link>
                             <Link
                               href={`/task/${task.id}/edit`}
                               className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors text-center"
                             >
                               –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                             </Link>
                    </div>
                  </div>
                  
                  {/* –¢–µ–≥–∏ */}
                  {task.tags && task.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2">
                      {task.tags.map((tag, index) => (
                        <span key={index} className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))
            ) : (
              <div className="bg-white rounded-lg border border-gray-200 p-8 text-center">
                <div className="text-gray-400 mb-4">
                  <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p className="text-gray-500">
                  {activeTab === 'all' 
                    ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'
                    : `–ù–µ—Ç –∑–∞–¥–∞—á –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${tabs.find(t => t.id === activeTab)?.name}"`
                  }
                </p>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}
