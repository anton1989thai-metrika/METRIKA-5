"use client"

import { useState } from "react"
import { ChevronDown } from "lucide-react"

interface Language {
  code: string
  name: string
  flag: string
}

const languages: Language[] = [
  { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
  { code: "en", name: "English", flag: "üá∫üá∏" },
  { code: "th", name: "‡πÑ‡∏ó‡∏¢", flag: "üáπüá≠" },
  { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
  { code: "ko", name: "ÌïúÍµ≠Ïñ¥", flag: "üá∞üá∑" },
  { code: "ja", name: "Êó•Êú¨Ë™û", flag: "üáØüáµ" },
  { code: "uz", name: "O'zbek", flag: "üá∫üáø" },
  { code: "tg", name: "–¢–æ“∑–∏–∫”£", flag: "üáπüáØ" },
  { code: "kk", name: "“ö–∞–∑–∞“õ—à–∞", flag: "üá∞üáø" },
  { code: "hi", name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", flag: "üáÆüá≥" }
]

export default function LanguageSelector() {
  const [isOpen, setIsOpen] = useState(false)
  const [selectedLanguage, setSelectedLanguage] = useState(languages[0]) // –†—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  const handleLanguageSelect = (language: Language) => {
    setSelectedLanguage(language)
    setIsOpen(false)
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    console.log(`Selected language: ${language.name} (${language.code})`)
  }

  return (
    <div className="relative">
      {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 px-3 py-2 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
      >
        <span className="text-lg">{selectedLanguage.flag}</span>
        <span className="text-sm font-medium text-black">{selectedLanguage.code.toUpperCase()}</span>
        <ChevronDown className={`w-4 h-4 text-gray-500 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
      {isOpen && (
        <>
          {/* –û–≤–µ—Ä–ª–µ–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é */}
          <div
            className="fixed inset-0 z-10"
            onClick={() => setIsOpen(false)}
          />
          
          {/* –ú–µ–Ω—é —è–∑—ã–∫–æ–≤ */}
          <div className="absolute top-full right-0 mt-2 w-80 bg-white border border-gray-300 rounded-lg shadow-lg z-20">
            <div className="p-4">
              <h3 className="text-sm font-semibold text-gray-700 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</h3>
              
              {/* –î–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ */}
              <div className="grid grid-cols-2 gap-2">
                {languages.map((language) => (
                  <button
                    key={language.code}
                    onClick={() => handleLanguageSelect(language)}
                    className={`flex items-center gap-3 p-3 rounded-md text-left hover:bg-gray-50 transition-colors ${
                      selectedLanguage.code === language.code ? 'bg-blue-50 border border-blue-200' : ''
                    }`}
                  >
                    <span className="text-xl">{language.flag}</span>
                    <div>
                      <div className="text-sm font-medium text-black">{language.name}</div>
                      <div className="text-xs text-gray-500">{language.code.toUpperCase()}</div>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  )
}
